const web3Structure = {
  _emitter: {
    _events: {
      CONFIG_CHANGE: {
        0: "object",
        1: "object",
        2: "object",
        3: "object",
        length: "number",
      },
    },
    _eventsCount: "number",
    maxListeners: "number",
  },
  config: {
    handleRevert: "boolean",
    defaultAccount: "undefined",
    defaultBlock: "string",
    transactionBlockTimeout: "number",
    transactionConfirmationBlocks: "number",
    transactionPollingInterval: "number",
    transactionPollingTimeout: "number",
    transactionReceiptPollingInterval: "undefined",
    transactionSendTimeout: "number",
    transactionConfirmationPollingInterval: "undefined",
    blockHeaderTimeout: "number",
    maxListenersWarningThreshold: "number",
    contractDataInputFill: "string",
    defaultNetworkId: "undefined",
    defaultChain: "string",
    defaultHardfork: "string",
    defaultCommon: "undefined",
    defaultTransactionType: "string",
    defaultMaxPriorityFeePerGas: "string",
    enableExperimentalFeatures: {
      useSubscriptionWhenCheckingBlockTimeout: "boolean",
      useRpcCallSpecification: "boolean",
    },
    transactionBuilder: "undefined",
    transactionTypeParser: "undefined",
    customTransactionSchema: "undefined",
    defaultReturnFormat: {
      number: "string",
      bytes: "string",
    },
    ignoreGasPricing: "boolean",
  },
  providers: {
    HttpProvider: "[Function]",
    WebsocketProvider: "[Function]",
  },
  _requestManager: {
    _emitter: {
      _events: {
        BEFORE_PROVIDER_CHANGE: "object",
        PROVIDER_CHANGED: "object",
      },
      _eventsCount: "number",
      maxListeners: "number",
    },
    _provider: {
      debug: {
        enabled: "boolean",
        logger: "[Function]",
      },
      removeListener: "[Function]",
      disconnect: "[Function]",
    },
    useRpcCallSpecification: "undefined",
  },
  _subscriptionManager: {
    requestManager: {
      _emitter: {
        _events: "object",
        _eventsCount: "number",
        maxListeners: "number",
      },
      _provider: {
        debug: "object",
        removeListener: "[Function]",
        disconnect: "[Function]",
      },
      useRpcCallSpecification: "undefined",
    },
    registeredSubscriptions: {
      logs: "[Function]",
      newPendingTransactions: "[Function]",
      newHeads: "[Function]",
      syncing: "[Function]",
      pendingTransactions: "[Function]",
      newBlockHeaders: "[Function]",
    },
    tolerateUnlinkedSubscription: "boolean",
    _subscriptions: {},
  },
  _wallet: {
    length: "number",
    _accountProvider: {
      create: "[Function]",
      privateKeyToAccount: "[Function]",
      decrypt: "[Function]",
    },
    _addressMap: {},
    _defaultKeyName: "string",
  },
  _accountProvider: {
    signTransaction: "[Function]",
    create: "[Function]",
    privateKeyToAccount: "[Function]",
    decrypt: "[Function]",
    recoverTransaction: "[Function]",
    hashMessage: "[Function]",
    sign: "[Function]",
    recover: "[Function]",
    encrypt: "[Function]",
    wallet: {
      length: "number",
      _accountProvider: {
        create: "[Function]",
        privateKeyToAccount: "[Function]",
        decrypt: "[Function]",
      },
      _addressMap: {},
      _defaultKeyName: "string",
    },
    privateKeyToAddress: "[Function]",
    parseAndValidatePrivateKey: "[Function]",
    privateKeyToPublicKey: "[Function]",
  },
  utils: {
    ChunkResponseParser: "[Function]",
    Eip1193Provider: "[Function]",
    EventEmitter: "[Function]",
    SocketProvider: "[Function]",
    Web3DeferredPromise: "[Function]",
    asciiToHex: "[Function]",
    bytesToHex: "[Function]",
    bytesToUint8Array: "[Function]",
    checkAddressCheckSum: "[Function]",
    compareBlockNumbers: "[Function]",
    convert: "[Function]",
    convertScalarValue: "[Function]",
    encodePacked: "[Function]",
    ethUnitMap: {
      noether: "bigint",
      wei: "bigint",
      kwei: "bigint",
      Kwei: "bigint",
      babbage: "bigint",
      femtoether: "bigint",
      mwei: "bigint",
      Mwei: "bigint",
      lovelace: "bigint",
      picoether: "bigint",
      gwei: "bigint",
      Gwei: "bigint",
      shannon: "bigint",
      nanoether: "bigint",
      nano: "bigint",
      szabo: "bigint",
      microether: "bigint",
      micro: "bigint",
      finney: "bigint",
      milliether: "bigint",
      milli: "bigint",
      ether: "bigint",
      kether: "bigint",
      grand: "bigint",
      mether: "bigint",
      gether: "bigint",
      tether: "bigint",
    },
    format: "[Function]",
    fromAscii: "[Function]",
    fromDecimal: "[Function]",
    fromTwosComplement: "[Function]",
    fromUtf8: "[Function]",
    fromWei: "[Function]",
    getStorageSlotNumForLongString: "[Function]",
    hexToAscii: "[Function]",
    hexToBytes: "[Function]",
    hexToNumber: "[Function]",
    hexToNumberString: "[Function]",
    hexToString: "[Function]",
    hexToUtf8: "[Function]",
    isAddress: "[Function]",
    isBatchRequest: "[Function]",
    isBatchResponse: "[Function]",
    isBloom: "[Function]",
    isContractAddressInBloom: "[Function]",
    isContractInitOptions: "[Function]",
    isDataFormat: "[Function]",
    isHex: "[Function]",
    isHexStrict: "[Function]",
    isInBloom: "[Function]",
    isNullish: "[Function]",
    isPromise: "[Function]",
    isResponseRpcError: "[Function]",
    isResponseWithError: "[Function]",
    isResponseWithNotification: "[Function]",
    isResponseWithResult: "[Function]",
    isSubscriptionResult: "[Function]",
    isTopic: "[Function]",
    isTopicInBloom: "[Function]",
    isUint8Array: "[Function]",
    isUserEthereumAddressInBloom: "[Function]",
    isValidResponse: "[Function]",
    jsonRpc: {
      isBatchRequest: "[Function]",
      isBatchResponse: "[Function]",
      isResponseRpcError: "[Function]",
      isResponseWithError: "[Function]",
      isResponseWithNotification: "[Function]",
      isResponseWithResult: "[Function]",
      isSubscriptionResult: "[Function]",
      isValidResponse: "[Function]",
      setRequestIdStart: "[Function]",
      toBatchPayload: "[Function]",
      toPayload: "[Function]",
      validateResponse: "[Function]",
    },
    keccak256: "[Function]",
    keccak256Wrapper: "[Function]",
    leftPad: "[Function]",
    mergeDeep: "[Function]",
    numberToHex: "[Function]",
    padLeft: "[Function]",
    padRight: "[Function]",
    pollTillDefined: "[Function]",
    pollTillDefinedAndReturnIntervalId: "[Function]",
    processSolidityEncodePackedArgs: "[Function]",
    randomBytes: "[Function]",
    randomHex: "[Function]",
    rejectIfConditionAtInterval: "[Function]",
    rejectIfTimeout: "[Function]",
    rightPad: "[Function]",
    setRequestIdStart: "[Function]",
    sha3: "[Function]",
    sha3Raw: "[Function]",
    soliditySha3: "[Function]",
    soliditySha3Raw: "[Function]",
    stringToHex: "[Function]",
    toAscii: "[Function]",
    toBatchPayload: "[Function]",
    toBigInt: "[Function]",
    toBool: "[Function]",
    toChecksumAddress: "[Function]",
    toDecimal: "[Function]",
    toHex: "[Function]",
    toNumber: "[Function]",
    toPayload: "[Function]",
    toTwosComplement: "[Function]",
    toUtf8: "[Function]",
    toWei: "[Function]",
    uint8ArrayConcat: "[Function]",
    uint8ArrayEquals: "[Function]",
    utf8ToBytes: "[Function]",
    utf8ToHex: "[Function]",
    uuidV4: "[Function]",
    validateResponse: "[Function]",
    waitWithTimeout: "[Function]",
  },
  Web3Eth: {
    _emitter: {
      _events: {},
      _eventsCount: "number",
      maxListeners: "number",
    },
    config: {
      handleRevert: "boolean",
      defaultAccount: "undefined",
      defaultBlock: "string",
      transactionBlockTimeout: "number",
      transactionConfirmationBlocks: "number",
      transactionPollingInterval: "number",
      transactionPollingTimeout: "number",
      transactionReceiptPollingInterval: "undefined",
      transactionSendTimeout: "number",
      transactionConfirmationPollingInterval: "undefined",
      blockHeaderTimeout: "number",
      maxListenersWarningThreshold: "number",
      contractDataInputFill: "string",
      defaultNetworkId: "undefined",
      defaultChain: "string",
      defaultHardfork: "string",
      defaultCommon: "undefined",
      defaultTransactionType: "string",
      defaultMaxPriorityFeePerGas: "string",
      enableExperimentalFeatures: {
        useSubscriptionWhenCheckingBlockTimeout: "boolean",
        useRpcCallSpecification: "boolean",
      },
      transactionBuilder: "undefined",
      transactionTypeParser: "undefined",
      customTransactionSchema: "undefined",
      defaultReturnFormat: {
        number: "string",
        bytes: "string",
      },
      ignoreGasPricing: "boolean",
    },
    providers: {
      HttpProvider: "[Function]",
      WebsocketProvider: "[Function]",
    },
    _requestManager: {
      _emitter: {
        _events: "object",
        _eventsCount: "number",
        maxListeners: "number",
      },
      _provider: {
        debug: "object",
        removeListener: "[Function]",
        disconnect: "[Function]",
      },
      useRpcCallSpecification: "undefined",
    },
    _subscriptionManager: {
      requestManager: {
        _emitter: "object",
        _provider: "object",
        useRpcCallSpecification: "undefined",
      },
      registeredSubscriptions: {
        logs: "[Function]",
        newPendingTransactions: "[Function]",
        newHeads: "[Function]",
        syncing: "[Function]",
        pendingTransactions: "[Function]",
        newBlockHeaders: "[Function]",
      },
      tolerateUnlinkedSubscription: "boolean",
      _subscriptions: {},
    },
    _accountProvider: {
      signTransaction: "[Function]",
      create: "[Function]",
      privateKeyToAccount: "[Function]",
      decrypt: "[Function]",
      recoverTransaction: "[Function]",
      hashMessage: "[Function]",
      sign: "[Function]",
      recover: "[Function]",
      encrypt: "[Function]",
      wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
      privateKeyToAddress: "[Function]",
      parseAndValidatePrivateKey: "[Function]",
      privateKeyToPublicKey: "[Function]",
    },
    _wallet: {
      length: "number",
      _accountProvider: {
        create: "[Function]",
        privateKeyToAccount: "[Function]",
        decrypt: "[Function]",
      },
      _addressMap: {},
      _defaultKeyName: "string",
    },
    ens: {
      _emitter: {
        _events: "object",
        _eventsCount: "number",
        maxListeners: "number",
      },
      config: {
        handleRevert: "boolean",
        defaultAccount: "undefined",
        defaultBlock: "string",
        transactionBlockTimeout: "number",
        transactionConfirmationBlocks: "number",
        transactionPollingInterval: "number",
        transactionPollingTimeout: "number",
        transactionReceiptPollingInterval: "undefined",
        transactionSendTimeout: "number",
        transactionConfirmationPollingInterval: "undefined",
        blockHeaderTimeout: "number",
        maxListenersWarningThreshold: "number",
        contractDataInputFill: "string",
        defaultNetworkId: "undefined",
        defaultChain: "string",
        defaultHardfork: "string",
        defaultCommon: "undefined",
        defaultTransactionType: "string",
        defaultMaxPriorityFeePerGas: "string",
        enableExperimentalFeatures: "object",
        transactionBuilder: "undefined",
        transactionTypeParser: "undefined",
        customTransactionSchema: "undefined",
        defaultReturnFormat: "object",
        ignoreGasPricing: "boolean",
      },
      providers: {
        HttpProvider: "[Function]",
        WebsocketProvider: "[Function]",
      },
      _requestManager: {
        _emitter: "object",
        _provider: "object",
        useRpcCallSpecification: "undefined",
      },
      _subscriptionManager: {
        requestManager: "object",
        registeredSubscriptions: "object",
        tolerateUnlinkedSubscription: "boolean",
        _subscriptions: "object",
      },
      _accountProvider: {
        signTransaction: "[Function]",
        create: "[Function]",
        privateKeyToAccount: "[Function]",
        decrypt: "[Function]",
        recoverTransaction: "[Function]",
        hashMessage: "[Function]",
        sign: "[Function]",
        recover: "[Function]",
        encrypt: "[Function]",
        wallet: "object",
        privateKeyToAddress: "[Function]",
        parseAndValidatePrivateKey: "[Function]",
        privateKeyToPublicKey: "[Function]",
      },
      _wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
      registryAddress: "string",
      _registry: {
        contract: "object",
        context: "object",
      },
      _resolver: {
        registry: "object",
      },
    },
    Iban: "[Function]",
    net: {
      _emitter: {
        _events: "object",
        _eventsCount: "number",
        maxListeners: "number",
      },
      config: {
        handleRevert: "boolean",
        defaultAccount: "undefined",
        defaultBlock: "string",
        transactionBlockTimeout: "number",
        transactionConfirmationBlocks: "number",
        transactionPollingInterval: "number",
        transactionPollingTimeout: "number",
        transactionReceiptPollingInterval: "undefined",
        transactionSendTimeout: "number",
        transactionConfirmationPollingInterval: "undefined",
        blockHeaderTimeout: "number",
        maxListenersWarningThreshold: "number",
        contractDataInputFill: "string",
        defaultNetworkId: "undefined",
        defaultChain: "string",
        defaultHardfork: "string",
        defaultCommon: "undefined",
        defaultTransactionType: "string",
        defaultMaxPriorityFeePerGas: "string",
        enableExperimentalFeatures: "object",
        transactionBuilder: "undefined",
        transactionTypeParser: "undefined",
        customTransactionSchema: "undefined",
        defaultReturnFormat: "object",
        ignoreGasPricing: "boolean",
      },
      providers: {
        HttpProvider: "[Function]",
        WebsocketProvider: "[Function]",
      },
      _requestManager: {
        _emitter: "object",
        _provider: "object",
        useRpcCallSpecification: "undefined",
      },
      _subscriptionManager: {
        requestManager: "object",
        registeredSubscriptions: "object",
        tolerateUnlinkedSubscription: "boolean",
        _subscriptions: "object",
      },
      _accountProvider: {
        signTransaction: "[Function]",
        create: "[Function]",
        privateKeyToAccount: "[Function]",
        decrypt: "[Function]",
        recoverTransaction: "[Function]",
        hashMessage: "[Function]",
        sign: "[Function]",
        recover: "[Function]",
        encrypt: "[Function]",
        wallet: "object",
        privateKeyToAddress: "[Function]",
        parseAndValidatePrivateKey: "[Function]",
        privateKeyToPublicKey: "[Function]",
      },
      _wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
    },
    personal: {
      _emitter: {
        _events: "object",
        _eventsCount: "number",
        maxListeners: "number",
      },
      config: {
        handleRevert: "boolean",
        defaultAccount: "undefined",
        defaultBlock: "string",
        transactionBlockTimeout: "number",
        transactionConfirmationBlocks: "number",
        transactionPollingInterval: "number",
        transactionPollingTimeout: "number",
        transactionReceiptPollingInterval: "undefined",
        transactionSendTimeout: "number",
        transactionConfirmationPollingInterval: "undefined",
        blockHeaderTimeout: "number",
        maxListenersWarningThreshold: "number",
        contractDataInputFill: "string",
        defaultNetworkId: "undefined",
        defaultChain: "string",
        defaultHardfork: "string",
        defaultCommon: "undefined",
        defaultTransactionType: "string",
        defaultMaxPriorityFeePerGas: "string",
        enableExperimentalFeatures: "object",
        transactionBuilder: "undefined",
        transactionTypeParser: "undefined",
        customTransactionSchema: "undefined",
        defaultReturnFormat: "object",
        ignoreGasPricing: "boolean",
      },
      providers: {
        HttpProvider: "[Function]",
        WebsocketProvider: "[Function]",
      },
      _requestManager: {
        _emitter: "object",
        _provider: "object",
        useRpcCallSpecification: "undefined",
      },
      _subscriptionManager: {
        requestManager: "object",
        registeredSubscriptions: "object",
        tolerateUnlinkedSubscription: "boolean",
        _subscriptions: "object",
      },
      _accountProvider: {
        signTransaction: "[Function]",
        create: "[Function]",
        privateKeyToAccount: "[Function]",
        decrypt: "[Function]",
        recoverTransaction: "[Function]",
        hashMessage: "[Function]",
        sign: "[Function]",
        recover: "[Function]",
        encrypt: "[Function]",
        wallet: "object",
        privateKeyToAddress: "[Function]",
        parseAndValidatePrivateKey: "[Function]",
        privateKeyToPublicKey: "[Function]",
      },
      _wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
    },
    Contract: "[Function]",
    abi: {
      encodeEventSignature: "[Function]",
      encodeFunctionCall: "[Function]",
      encodeFunctionSignature: "[Function]",
      encodeParameter: "[Function]",
      encodeParameters: "[Function]",
      decodeParameter: "[Function]",
      decodeParameters: "[Function]",
      decodeLog: "[Function]",
    },
    accounts: {
      signTransaction: "[Function]",
      create: "[Function]",
      privateKeyToAccount: "[Function]",
      decrypt: "[Function]",
      recoverTransaction: "[Function]",
      hashMessage: "[Function]",
      sign: "[Function]",
      recover: "[Function]",
      encrypt: "[Function]",
      wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
      privateKeyToAddress: "[Function]",
      parseAndValidatePrivateKey: "[Function]",
      privateKeyToPublicKey: "[Function]",
    },
  },
  ENS: {
    _emitter: {
      _events: {},
      _eventsCount: "number",
      maxListeners: "number",
    },
    config: {
      handleRevert: "boolean",
      defaultAccount: "undefined",
      defaultBlock: "string",
      transactionBlockTimeout: "number",
      transactionConfirmationBlocks: "number",
      transactionPollingInterval: "number",
      transactionPollingTimeout: "number",
      transactionReceiptPollingInterval: "undefined",
      transactionSendTimeout: "number",
      transactionConfirmationPollingInterval: "undefined",
      blockHeaderTimeout: "number",
      maxListenersWarningThreshold: "number",
      contractDataInputFill: "string",
      defaultNetworkId: "undefined",
      defaultChain: "string",
      defaultHardfork: "string",
      defaultCommon: "undefined",
      defaultTransactionType: "string",
      defaultMaxPriorityFeePerGas: "string",
      enableExperimentalFeatures: {
        useSubscriptionWhenCheckingBlockTimeout: "boolean",
        useRpcCallSpecification: "boolean",
      },
      transactionBuilder: "undefined",
      transactionTypeParser: "undefined",
      customTransactionSchema: "undefined",
      defaultReturnFormat: {
        number: "string",
        bytes: "string",
      },
      ignoreGasPricing: "boolean",
    },
    providers: {
      HttpProvider: "[Function]",
      WebsocketProvider: "[Function]",
    },
    _requestManager: {
      _emitter: {
        _events: "object",
        _eventsCount: "number",
        maxListeners: "number",
      },
      _provider: {
        debug: "object",
        removeListener: "[Function]",
        disconnect: "[Function]",
      },
      useRpcCallSpecification: "undefined",
    },
    _subscriptionManager: {
      requestManager: {
        _emitter: "object",
        _provider: "object",
        useRpcCallSpecification: "undefined",
      },
      registeredSubscriptions: {
        logs: "[Function]",
        newPendingTransactions: "[Function]",
        newHeads: "[Function]",
        syncing: "[Function]",
        pendingTransactions: "[Function]",
        newBlockHeaders: "[Function]",
      },
      tolerateUnlinkedSubscription: "boolean",
      _subscriptions: {},
    },
    _accountProvider: {
      signTransaction: "[Function]",
      create: "[Function]",
      privateKeyToAccount: "[Function]",
      decrypt: "[Function]",
      recoverTransaction: "[Function]",
      hashMessage: "[Function]",
      sign: "[Function]",
      recover: "[Function]",
      encrypt: "[Function]",
      wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
      privateKeyToAddress: "[Function]",
      parseAndValidatePrivateKey: "[Function]",
      privateKeyToPublicKey: "[Function]",
    },
    _wallet: {
      length: "number",
      _accountProvider: {
        create: "[Function]",
        privateKeyToAccount: "[Function]",
        decrypt: "[Function]",
      },
      _addressMap: {},
      _defaultKeyName: "string",
    },
    registryAddress: "string",
    _registry: {
      contract: {
        _emitter: "object",
        config: "object",
        providers: "object",
        _requestManager: "object",
        _subscriptionManager: "object",
        _accountProvider: "object",
        _wallet: "object",
        syncWithContext: "boolean",
        _functions: "object",
        _overloadedMethodAbis: "object",
        _methods: "object",
        _events: "object",
        _jsonInterface: "object",
        _errorsInterface: "object",
        _address: "string",
        options: "object",
      },
      context: {
        config: "object",
        provider: "object",
        requestManager: "object",
        subscriptionManager: "object",
        registeredSubscriptions: "object",
        providers: "object",
        wallet: "object",
        accountProvider: "object",
      },
    },
    _resolver: {
      registry: {
        contract: "object",
        context: "object",
      },
    },
  },
  Net: {
    _emitter: {
      _events: {},
      _eventsCount: "number",
      maxListeners: "number",
    },
    config: {
      handleRevert: "boolean",
      defaultAccount: "undefined",
      defaultBlock: "string",
      transactionBlockTimeout: "number",
      transactionConfirmationBlocks: "number",
      transactionPollingInterval: "number",
      transactionPollingTimeout: "number",
      transactionReceiptPollingInterval: "undefined",
      transactionSendTimeout: "number",
      transactionConfirmationPollingInterval: "undefined",
      blockHeaderTimeout: "number",
      maxListenersWarningThreshold: "number",
      contractDataInputFill: "string",
      defaultNetworkId: "undefined",
      defaultChain: "string",
      defaultHardfork: "string",
      defaultCommon: "undefined",
      defaultTransactionType: "string",
      defaultMaxPriorityFeePerGas: "string",
      enableExperimentalFeatures: {
        useSubscriptionWhenCheckingBlockTimeout: "boolean",
        useRpcCallSpecification: "boolean",
      },
      transactionBuilder: "undefined",
      transactionTypeParser: "undefined",
      customTransactionSchema: "undefined",
      defaultReturnFormat: {
        number: "string",
        bytes: "string",
      },
      ignoreGasPricing: "boolean",
    },
    providers: {
      HttpProvider: "[Function]",
      WebsocketProvider: "[Function]",
    },
    _requestManager: {
      _emitter: {
        _events: "object",
        _eventsCount: "number",
        maxListeners: "number",
      },
      _provider: {
        debug: "object",
        removeListener: "[Function]",
        disconnect: "[Function]",
      },
      useRpcCallSpecification: "undefined",
    },
    _subscriptionManager: {
      requestManager: {
        _emitter: "object",
        _provider: "object",
        useRpcCallSpecification: "undefined",
      },
      registeredSubscriptions: {
        logs: "[Function]",
        newPendingTransactions: "[Function]",
        newHeads: "[Function]",
        syncing: "[Function]",
        pendingTransactions: "[Function]",
        newBlockHeaders: "[Function]",
      },
      tolerateUnlinkedSubscription: "boolean",
      _subscriptions: {},
    },
    _accountProvider: {
      signTransaction: "[Function]",
      create: "[Function]",
      privateKeyToAccount: "[Function]",
      decrypt: "[Function]",
      recoverTransaction: "[Function]",
      hashMessage: "[Function]",
      sign: "[Function]",
      recover: "[Function]",
      encrypt: "[Function]",
      wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
      privateKeyToAddress: "[Function]",
      parseAndValidatePrivateKey: "[Function]",
      privateKeyToPublicKey: "[Function]",
    },
    _wallet: {
      length: "number",
      _accountProvider: {
        create: "[Function]",
        privateKeyToAccount: "[Function]",
        decrypt: "[Function]",
      },
      _addressMap: {},
      _defaultKeyName: "string",
    },
  },
  Personal: {
    _emitter: {
      _events: {},
      _eventsCount: "number",
      maxListeners: "number",
    },
    config: {
      handleRevert: "boolean",
      defaultAccount: "undefined",
      defaultBlock: "string",
      transactionBlockTimeout: "number",
      transactionConfirmationBlocks: "number",
      transactionPollingInterval: "number",
      transactionPollingTimeout: "number",
      transactionReceiptPollingInterval: "undefined",
      transactionSendTimeout: "number",
      transactionConfirmationPollingInterval: "undefined",
      blockHeaderTimeout: "number",
      maxListenersWarningThreshold: "number",
      contractDataInputFill: "string",
      defaultNetworkId: "undefined",
      defaultChain: "string",
      defaultHardfork: "string",
      defaultCommon: "undefined",
      defaultTransactionType: "string",
      defaultMaxPriorityFeePerGas: "string",
      enableExperimentalFeatures: {
        useSubscriptionWhenCheckingBlockTimeout: "boolean",
        useRpcCallSpecification: "boolean",
      },
      transactionBuilder: "undefined",
      transactionTypeParser: "undefined",
      customTransactionSchema: "undefined",
      defaultReturnFormat: {
        number: "string",
        bytes: "string",
      },
      ignoreGasPricing: "boolean",
    },
    providers: {
      HttpProvider: "[Function]",
      WebsocketProvider: "[Function]",
    },
    _requestManager: {
      _emitter: {
        _events: "object",
        _eventsCount: "number",
        maxListeners: "number",
      },
      _provider: {
        debug: "object",
        removeListener: "[Function]",
        disconnect: "[Function]",
      },
      useRpcCallSpecification: "undefined",
    },
    _subscriptionManager: {
      requestManager: {
        _emitter: "object",
        _provider: "object",
        useRpcCallSpecification: "undefined",
      },
      registeredSubscriptions: {
        logs: "[Function]",
        newPendingTransactions: "[Function]",
        newHeads: "[Function]",
        syncing: "[Function]",
        pendingTransactions: "[Function]",
        newBlockHeaders: "[Function]",
      },
      tolerateUnlinkedSubscription: "boolean",
      _subscriptions: {},
    },
    _accountProvider: {
      signTransaction: "[Function]",
      create: "[Function]",
      privateKeyToAccount: "[Function]",
      decrypt: "[Function]",
      recoverTransaction: "[Function]",
      hashMessage: "[Function]",
      sign: "[Function]",
      recover: "[Function]",
      encrypt: "[Function]",
      wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
      privateKeyToAddress: "[Function]",
      parseAndValidatePrivateKey: "[Function]",
      privateKeyToPublicKey: "[Function]",
    },
    _wallet: {
      length: "number",
      _accountProvider: {
        create: "[Function]",
        privateKeyToAccount: "[Function]",
        decrypt: "[Function]",
      },
      _addressMap: {},
      _defaultKeyName: "string",
    },
  },
  eth: {
    _emitter: {
      _events: {},
      _eventsCount: "number",
      maxListeners: "number",
    },
    config: {
      handleRevert: "boolean",
      defaultAccount: "undefined",
      defaultBlock: "string",
      transactionBlockTimeout: "number",
      transactionConfirmationBlocks: "number",
      transactionPollingInterval: "number",
      transactionPollingTimeout: "number",
      transactionReceiptPollingInterval: "undefined",
      transactionSendTimeout: "number",
      transactionConfirmationPollingInterval: "undefined",
      blockHeaderTimeout: "number",
      maxListenersWarningThreshold: "number",
      contractDataInputFill: "string",
      defaultNetworkId: "undefined",
      defaultChain: "string",
      defaultHardfork: "string",
      defaultCommon: "undefined",
      defaultTransactionType: "string",
      defaultMaxPriorityFeePerGas: "string",
      enableExperimentalFeatures: {
        useSubscriptionWhenCheckingBlockTimeout: "boolean",
        useRpcCallSpecification: "boolean",
      },
      transactionBuilder: "undefined",
      transactionTypeParser: "undefined",
      customTransactionSchema: "undefined",
      defaultReturnFormat: {
        number: "string",
        bytes: "string",
      },
      ignoreGasPricing: "boolean",
    },
    providers: {
      HttpProvider: "[Function]",
      WebsocketProvider: "[Function]",
    },
    _requestManager: {
      _emitter: {
        _events: "object",
        _eventsCount: "number",
        maxListeners: "number",
      },
      _provider: {
        debug: "object",
        removeListener: "[Function]",
        disconnect: "[Function]",
      },
      useRpcCallSpecification: "undefined",
    },
    _subscriptionManager: {
      requestManager: {
        _emitter: "object",
        _provider: "object",
        useRpcCallSpecification: "undefined",
      },
      registeredSubscriptions: {
        logs: "[Function]",
        newPendingTransactions: "[Function]",
        newHeads: "[Function]",
        syncing: "[Function]",
        pendingTransactions: "[Function]",
        newBlockHeaders: "[Function]",
      },
      tolerateUnlinkedSubscription: "boolean",
      _subscriptions: {},
    },
    _accountProvider: {
      signTransaction: "[Function]",
      create: "[Function]",
      privateKeyToAccount: "[Function]",
      decrypt: "[Function]",
      recoverTransaction: "[Function]",
      hashMessage: "[Function]",
      sign: "[Function]",
      recover: "[Function]",
      encrypt: "[Function]",
      wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
      privateKeyToAddress: "[Function]",
      parseAndValidatePrivateKey: "[Function]",
      privateKeyToPublicKey: "[Function]",
    },
    _wallet: {
      length: "number",
      _accountProvider: {
        create: "[Function]",
        privateKeyToAccount: "[Function]",
        decrypt: "[Function]",
      },
      _addressMap: {},
      _defaultKeyName: "string",
    },
    ens: {
      _emitter: {
        _events: "object",
        _eventsCount: "number",
        maxListeners: "number",
      },
      config: {
        handleRevert: "boolean",
        defaultAccount: "undefined",
        defaultBlock: "string",
        transactionBlockTimeout: "number",
        transactionConfirmationBlocks: "number",
        transactionPollingInterval: "number",
        transactionPollingTimeout: "number",
        transactionReceiptPollingInterval: "undefined",
        transactionSendTimeout: "number",
        transactionConfirmationPollingInterval: "undefined",
        blockHeaderTimeout: "number",
        maxListenersWarningThreshold: "number",
        contractDataInputFill: "string",
        defaultNetworkId: "undefined",
        defaultChain: "string",
        defaultHardfork: "string",
        defaultCommon: "undefined",
        defaultTransactionType: "string",
        defaultMaxPriorityFeePerGas: "string",
        enableExperimentalFeatures: "object",
        transactionBuilder: "undefined",
        transactionTypeParser: "undefined",
        customTransactionSchema: "undefined",
        defaultReturnFormat: "object",
        ignoreGasPricing: "boolean",
      },
      providers: {
        HttpProvider: "[Function]",
        WebsocketProvider: "[Function]",
      },
      _requestManager: {
        _emitter: "object",
        _provider: "object",
        useRpcCallSpecification: "undefined",
      },
      _subscriptionManager: {
        requestManager: "object",
        registeredSubscriptions: "object",
        tolerateUnlinkedSubscription: "boolean",
        _subscriptions: "object",
      },
      _accountProvider: {
        signTransaction: "[Function]",
        create: "[Function]",
        privateKeyToAccount: "[Function]",
        decrypt: "[Function]",
        recoverTransaction: "[Function]",
        hashMessage: "[Function]",
        sign: "[Function]",
        recover: "[Function]",
        encrypt: "[Function]",
        wallet: "object",
        privateKeyToAddress: "[Function]",
        parseAndValidatePrivateKey: "[Function]",
        privateKeyToPublicKey: "[Function]",
      },
      _wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
      registryAddress: "string",
      _registry: {
        contract: "object",
        context: "object",
      },
      _resolver: {
        registry: "object",
      },
    },
    Iban: "[Function]",
    net: {
      _emitter: {
        _events: "object",
        _eventsCount: "number",
        maxListeners: "number",
      },
      config: {
        handleRevert: "boolean",
        defaultAccount: "undefined",
        defaultBlock: "string",
        transactionBlockTimeout: "number",
        transactionConfirmationBlocks: "number",
        transactionPollingInterval: "number",
        transactionPollingTimeout: "number",
        transactionReceiptPollingInterval: "undefined",
        transactionSendTimeout: "number",
        transactionConfirmationPollingInterval: "undefined",
        blockHeaderTimeout: "number",
        maxListenersWarningThreshold: "number",
        contractDataInputFill: "string",
        defaultNetworkId: "undefined",
        defaultChain: "string",
        defaultHardfork: "string",
        defaultCommon: "undefined",
        defaultTransactionType: "string",
        defaultMaxPriorityFeePerGas: "string",
        enableExperimentalFeatures: "object",
        transactionBuilder: "undefined",
        transactionTypeParser: "undefined",
        customTransactionSchema: "undefined",
        defaultReturnFormat: "object",
        ignoreGasPricing: "boolean",
      },
      providers: {
        HttpProvider: "[Function]",
        WebsocketProvider: "[Function]",
      },
      _requestManager: {
        _emitter: "object",
        _provider: "object",
        useRpcCallSpecification: "undefined",
      },
      _subscriptionManager: {
        requestManager: "object",
        registeredSubscriptions: "object",
        tolerateUnlinkedSubscription: "boolean",
        _subscriptions: "object",
      },
      _accountProvider: {
        signTransaction: "[Function]",
        create: "[Function]",
        privateKeyToAccount: "[Function]",
        decrypt: "[Function]",
        recoverTransaction: "[Function]",
        hashMessage: "[Function]",
        sign: "[Function]",
        recover: "[Function]",
        encrypt: "[Function]",
        wallet: "object",
        privateKeyToAddress: "[Function]",
        parseAndValidatePrivateKey: "[Function]",
        privateKeyToPublicKey: "[Function]",
      },
      _wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
    },
    personal: {
      _emitter: {
        _events: "object",
        _eventsCount: "number",
        maxListeners: "number",
      },
      config: {
        handleRevert: "boolean",
        defaultAccount: "undefined",
        defaultBlock: "string",
        transactionBlockTimeout: "number",
        transactionConfirmationBlocks: "number",
        transactionPollingInterval: "number",
        transactionPollingTimeout: "number",
        transactionReceiptPollingInterval: "undefined",
        transactionSendTimeout: "number",
        transactionConfirmationPollingInterval: "undefined",
        blockHeaderTimeout: "number",
        maxListenersWarningThreshold: "number",
        contractDataInputFill: "string",
        defaultNetworkId: "undefined",
        defaultChain: "string",
        defaultHardfork: "string",
        defaultCommon: "undefined",
        defaultTransactionType: "string",
        defaultMaxPriorityFeePerGas: "string",
        enableExperimentalFeatures: "object",
        transactionBuilder: "undefined",
        transactionTypeParser: "undefined",
        customTransactionSchema: "undefined",
        defaultReturnFormat: "object",
        ignoreGasPricing: "boolean",
      },
      providers: {
        HttpProvider: "[Function]",
        WebsocketProvider: "[Function]",
      },
      _requestManager: {
        _emitter: "object",
        _provider: "object",
        useRpcCallSpecification: "undefined",
      },
      _subscriptionManager: {
        requestManager: "object",
        registeredSubscriptions: "object",
        tolerateUnlinkedSubscription: "boolean",
        _subscriptions: "object",
      },
      _accountProvider: {
        signTransaction: "[Function]",
        create: "[Function]",
        privateKeyToAccount: "[Function]",
        decrypt: "[Function]",
        recoverTransaction: "[Function]",
        hashMessage: "[Function]",
        sign: "[Function]",
        recover: "[Function]",
        encrypt: "[Function]",
        wallet: "object",
        privateKeyToAddress: "[Function]",
        parseAndValidatePrivateKey: "[Function]",
        privateKeyToPublicKey: "[Function]",
      },
      _wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
    },
    Contract: "[Function]",
    abi: {
      encodeEventSignature: "[Function]",
      encodeFunctionCall: "[Function]",
      encodeFunctionSignature: "[Function]",
      encodeParameter: "[Function]",
      encodeParameters: "[Function]",
      decodeParameter: "[Function]",
      decodeParameters: "[Function]",
      decodeLog: "[Function]",
    },
    accounts: {
      signTransaction: "[Function]",
      create: "[Function]",
      privateKeyToAccount: "[Function]",
      decrypt: "[Function]",
      recoverTransaction: "[Function]",
      hashMessage: "[Function]",
      sign: "[Function]",
      recover: "[Function]",
      encrypt: "[Function]",
      wallet: {
        length: "number",
        _accountProvider: "object",
        _addressMap: "object",
        _defaultKeyName: "string",
      },
      privateKeyToAddress: "[Function]",
      parseAndValidatePrivateKey: "[Function]",
      privateKeyToPublicKey: "[Function]",
    },
  },
};
